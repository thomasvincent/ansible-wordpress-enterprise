---
# Monitoring and logging tasks

- name: Create WordPress log directory
  ansible.builtin.file:
    path: "{{ wordpress_log_dir }}"
    state: directory
    owner: "{{ wordpress_php_fpm_user }}"
    group: "{{ wordpress_php_fpm_group }}"
    mode: '0755'
  tags:
    - wordpress:monitoring
    - wordpress:logging

- name: Create monitoring scripts directory
  ansible.builtin.file:
    path: "{{ wordpress_log_dir }}/scripts"
    state: directory
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:monitoring
    - wordpress:scripts

- name: Install monitoring dependencies
  ansible.builtin.package:
    name:
      - logrotate
      - rsyslog
      - curl
      - wget
      - htop
      - iotop
      - nethogs
    state: present
  tags:
    - wordpress:monitoring
    - wordpress:dependencies

- name: Configure WordPress error logging
  ansible.builtin.lineinfile:
    path: "{{ wordpress_install_dir }}/wp-config.php"
    regexp: "define\\s*\\(\\s*['\"]WP_DEBUG_LOG['\"]"
    line: "define('WP_DEBUG_LOG', '{{ wordpress_error_log }}');"
    insertbefore: "/* That's all, stop editing!"
  when: 
    - wordpress_enable_logging | bool
    - wordpress_debug_log | bool
  notify: restart php-fpm
  tags:
    - wordpress:monitoring
    - wordpress:config

- name: Configure PHP error logging
  ansible.builtin.lineinfile:
    path: "{{ wordpress_php_ini_path }}"
    regexp: "^{{ item.key }} ="
    line: "{{ item.key }} = {{ item.value }}"
  loop:
    - { key: 'log_errors', value: 'On' }
    - { key: 'error_log', value: "{{ wordpress_error_log }}" }
    - { key: 'error_reporting', value: 'E_ALL & ~E_DEPRECATED & ~E_STRICT' }
  when: wordpress_enable_logging | bool
  notify: restart php-fpm
  tags:
    - wordpress:monitoring
    - wordpress:php

- name: Configure Nginx access and error logs
  ansible.builtin.lineinfile:
    path: "{{ wordpress_nginx_site_config }}"
    regexp: "{{ item.regexp }}"
    line: "    {{ item.line }}"
    insertafter: "server {"
  loop:
    - { regexp: 'access_log', line: "access_log {{ wordpress_access_log }} combined;" }
    - { regexp: 'error_log', line: "error_log {{ wordpress_error_log }} warn;" }
  when:
    - wordpress_web_server == 'nginx'
    - wordpress_enable_logging | bool
  notify: reload nginx
  tags:
    - wordpress:monitoring
    - wordpress:nginx

- name: Configure Apache access and error logs
  ansible.builtin.lineinfile:
    path: "{{ wordpress_apache_site_config }}"
    regexp: "{{ item.regexp }}"
    line: "    {{ item.line }}"
    insertafter: "<VirtualHost"
  loop:
    - { regexp: 'CustomLog', line: "CustomLog {{ wordpress_access_log }} combined" }
    - { regexp: 'ErrorLog', line: "ErrorLog {{ wordpress_error_log }}" }
  when:
    - wordpress_web_server == 'apache'
    - wordpress_enable_logging | bool
  notify: reload apache
  tags:
    - wordpress:monitoring
    - wordpress:apache

- name: Configure logrotate for WordPress logs
  ansible.builtin.template:
    src: logrotate-wordpress.j2
    dest: /etc/logrotate.d/wordpress
    owner: root
    group: root
    mode: '0644'
  when: wordpress_logrotate_enabled | bool
  tags:
    - wordpress:monitoring
    - wordpress:logrotate

- name: Configure logrotate for web server logs
  ansible.builtin.template:
    src: "logrotate-{{ wordpress_web_server }}.j2"
    dest: "/etc/logrotate.d/{{ wordpress_web_server }}-wordpress"
    owner: root
    group: root
    mode: '0644'
  when: wordpress_logrotate_enabled | bool
  tags:
    - wordpress:monitoring
    - wordpress:logrotate

- name: Create WordPress health check script
  ansible.builtin.template:
    src: health-check.sh.j2
    dest: "{{ wordpress_log_dir }}/scripts/health-check.sh"
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:monitoring
    - wordpress:health

- name: Create WordPress performance monitoring script
  ansible.builtin.template:
    src: performance-monitor.sh.j2
    dest: "{{ wordpress_log_dir }}/scripts/performance-monitor.sh"
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:monitoring
    - wordpress:performance

- name: Create WordPress security monitoring script
  ansible.builtin.template:
    src: security-monitor.sh.j2
    dest: "{{ wordpress_log_dir }}/scripts/security-monitor.sh"
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:monitoring
    - wordpress:security

- name: Create WordPress uptime monitoring script
  ansible.builtin.template:
    src: uptime-monitor.sh.j2
    dest: "{{ wordpress_log_dir }}/scripts/uptime-monitor.sh"
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:monitoring
    - wordpress:uptime

- name: Create log analysis script
  ansible.builtin.template:
    src: log-analysis.sh.j2
    dest: "{{ wordpress_log_dir }}/scripts/log-analysis.sh"
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:monitoring
    - wordpress:analysis

- name: Schedule health check monitoring
  ansible.builtin.cron:
    name: "WordPress Health Check"
    minute: "*/5"
    job: "{{ wordpress_log_dir }}/scripts/health-check.sh >> {{ wordpress_log_dir }}/health-check.log 2>&1"
    user: root
  tags:
    - wordpress:monitoring
    - wordpress:cron

- name: Schedule performance monitoring
  ansible.builtin.cron:
    name: "WordPress Performance Monitor"
    minute: "*/15"
    job: "{{ wordpress_log_dir }}/scripts/performance-monitor.sh >> {{ wordpress_log_dir }}/performance.log 2>&1"
    user: root
  tags:
    - wordpress:monitoring
    - wordpress:cron

- name: Schedule security monitoring
  ansible.builtin.cron:
    name: "WordPress Security Monitor"
    minute: "*/10"
    job: "{{ wordpress_log_dir }}/scripts/security-monitor.sh >> {{ wordpress_log_dir }}/security.log 2>&1"
    user: root
  tags:
    - wordpress:monitoring
    - wordpress:cron

- name: Schedule daily log analysis
  ansible.builtin.cron:
    name: "WordPress Log Analysis"
    minute: "0"
    hour: "6"
    job: "{{ wordpress_log_dir }}/scripts/log-analysis.sh >> {{ wordpress_log_dir }}/analysis.log 2>&1"
    user: root
  tags:
    - wordpress:monitoring
    - wordpress:cron

# Advanced Monitoring Setup

- name: Install monitoring agents (optional)
  ansible.builtin.package:
    name:
      - "{{ 'zabbix-agent' if wordpress_monitoring_agent == 'zabbix' else omit }}"
      - "{{ 'collectd' if wordpress_monitoring_agent == 'collectd' else omit }}"
    state: present
  when: wordpress_monitoring_agent is defined
  tags:
    - wordpress:monitoring
    - wordpress:agents

- name: Configure monitoring agent
  ansible.builtin.template:
    src: "{{ wordpress_monitoring_agent }}-config.j2"
    dest: "{{ wordpress_monitoring_agent_config_path }}"
    owner: root
    group: root
    mode: '0644'
  when: wordpress_monitoring_agent is defined
  notify: "restart {{ wordpress_monitoring_agent }}"
  tags:
    - wordpress:monitoring
    - wordpress:agents

- name: Create custom metrics collection script
  ansible.builtin.template:
    src: collect-metrics.sh.j2
    dest: "{{ wordpress_log_dir }}/scripts/collect-metrics.sh"
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:monitoring
    - wordpress:metrics

- name: Schedule metrics collection
  ansible.builtin.cron:
    name: "WordPress Metrics Collection"
    minute: "*/1"
    job: "{{ wordpress_log_dir }}/scripts/collect-metrics.sh >> {{ wordpress_log_dir }}/metrics.log 2>&1"
    user: root
  tags:
    - wordpress:monitoring
    - wordpress:cron

# Database Monitoring

- name: Create database monitoring script
  ansible.builtin.template:
    src: db-monitor.sh.j2
    dest: "{{ wordpress_log_dir }}/scripts/db-monitor.sh"
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:monitoring
    - wordpress:database

- name: Schedule database monitoring
  ansible.builtin.cron:
    name: "WordPress Database Monitor"
    minute: "*/5"
    job: "{{ wordpress_log_dir }}/scripts/db-monitor.sh >> {{ wordpress_log_dir }}/database.log 2>&1"
    user: root
  tags:
    - wordpress:monitoring
    - wordpress:cron

# Cache Monitoring

- name: Create cache monitoring script
  ansible.builtin.template:
    src: cache-monitor.sh.j2
    dest: "{{ wordpress_log_dir }}/scripts/cache-monitor.sh"
    owner: root
    group: root
    mode: '0755'
  when: wordpress_enable_redis | bool or wordpress_enable_memcached | bool
  tags:
    - wordpress:monitoring
    - wordpress:cache

- name: Schedule cache monitoring
  ansible.builtin.cron:
    name: "WordPress Cache Monitor"
    minute: "*/5"
    job: "{{ wordpress_log_dir }}/scripts/cache-monitor.sh >> {{ wordpress_log_dir }}/cache.log 2>&1"
    user: root
  when: wordpress_enable_redis | bool or wordpress_enable_memcached | bool
  tags:
    - wordpress:monitoring
    - wordpress:cron

# Alerting Setup

- name: Create alerting script
  ansible.builtin.template:
    src: alert.sh.j2
    dest: "{{ wordpress_log_dir }}/scripts/alert.sh"
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:monitoring
    - wordpress:alerting

- name: Configure email alerts
  ansible.builtin.template:
    src: email-alert.sh.j2
    dest: "{{ wordpress_log_dir }}/scripts/email-alert.sh"
    owner: root
    group: root
    mode: '0755'
  when: wordpress_smtp_enabled | bool
  tags:
    - wordpress:monitoring
    - wordpress:alerting

- name: Create monitoring dashboard data
  ansible.builtin.template:
    src: monitoring-data.json.j2
    dest: "{{ wordpress_log_dir }}/monitoring-data.json"
    owner: root
    group: root
    mode: '0644'
  tags:
    - wordpress:monitoring
    - wordpress:dashboard

- name: Test log file creation
  ansible.builtin.file:
    path: "{{ item }}"
    state: touch
    owner: "{{ wordpress_php_fpm_user }}"
    group: "{{ wordpress_php_fpm_group }}"
    mode: '0644'
  loop:
    - "{{ wordpress_error_log }}"
    - "{{ wordpress_access_log }}"
  when: wordpress_enable_logging | bool
  tags:
    - wordpress:monitoring
    - wordpress:test

- name: Verify monitoring setup
  ansible.builtin.command:
    cmd: "{{ wordpress_log_dir }}/scripts/health-check.sh"
  register: health_check_result
  changed_when: false
  failed_when: false
  tags:
    - wordpress:monitoring
    - wordpress:verify

- name: Display monitoring configuration summary
  ansible.builtin.debug:
    msg:
      - "Log directory: {{ wordpress_log_dir }}"
      - "Error log: {{ wordpress_error_log }}"
      - "Access log: {{ wordpress_access_log }}"
      - "Logrotate enabled: {{ wordpress_logrotate_enabled }}"
      - "Health check status: {{ 'OK' if health_check_result.rc == 0 else 'FAILED' }}"
  tags:
    - wordpress:monitoring
    - wordpress:verify