---
# Firewall configuration tasks

- name: Install firewall packages (RedHat/CentOS)
  ansible.builtin.package:
    name:
      - firewalld
      - iptables-services
    state: present
  when: ansible_os_family == "RedHat"
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Install firewall packages (Debian/Ubuntu)
  ansible.builtin.package:
    name:
      - ufw
      - iptables-persistent
    state: present
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Enable and start firewalld service (RedHat/CentOS)
  ansible.builtin.systemd:
    name: firewalld
    state: started
    enabled: true
  when: ansible_os_family == "RedHat"
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Configure firewalld zones (RedHat/CentOS)
  ansible.posix.firewalld:
    zone: "{{ wordpress_firewall_zone | default('public') }}"
    service: "{{ item }}"
    permanent: true
    state: enabled
    immediate: true
  loop:
    - ssh
    - http
    - https
  when: ansible_os_family == "RedHat"
  notify: reload firewalld
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Configure custom firewalld ports (RedHat/CentOS)
  ansible.posix.firewalld:
    zone: "{{ wordpress_firewall_zone | default('public') }}"
    port: "{{ item }}/tcp"
    permanent: true
    state: enabled
    immediate: true
  loop:
    - "{{ wordpress_http_port }}"
    - "{{ wordpress_https_port }}"
  when:
    - ansible_os_family == "RedHat"
    - wordpress_http_port != 80 or wordpress_https_port != 443
  notify: reload firewalld
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Configure firewalld rich rules for specific IPs (RedHat/CentOS)
  ansible.posix.firewalld:
    rich_rule: "rule family='ipv4' source address='{{ item }}' accept"
    zone: "{{ wordpress_firewall_zone | default('public') }}"
    permanent: true
    state: enabled
    immediate: true
  loop: "{{ wordpress_allowed_ips }}"
  when:
    - ansible_os_family == "RedHat"
    - wordpress_allowed_ips | length > 0
  notify: reload firewalld
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Block common attack ports (RedHat/CentOS)
  ansible.posix.firewalld:
    port: "{{ item }}/tcp"
    zone: "{{ wordpress_firewall_zone | default('public') }}"
    permanent: true
    state: disabled
    immediate: true
  loop:
    - "21"    # FTP
    - "23"    # Telnet
    - "25"    # SMTP
    - "53"    # DNS
    - "135"   # RPC
    - "139"   # NetBIOS
    - "445"   # SMB
    - "1433"  # SQL Server
    - "3306"  # MySQL
    - "3389"  # RDP
    - "5432"  # PostgreSQL
  when: ansible_os_family == "RedHat"
  failed_when: false
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Enable UFW (Debian/Ubuntu)
  community.general.ufw:
    state: enabled
    policy: deny
    direction: incoming
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Configure UFW default policies (Debian/Ubuntu)
  community.general.ufw:
    direction: "{{ item.direction }}"
    policy: "{{ item.policy }}"
  loop:
    - { direction: 'incoming', policy: 'deny' }
    - { direction: 'outgoing', policy: 'allow' }
    - { direction: 'routed', policy: 'deny' }
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Allow SSH through UFW (Debian/Ubuntu)
  community.general.ufw:
    rule: allow
    name: OpenSSH
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Allow HTTP through UFW (Debian/Ubuntu)
  community.general.ufw:
    rule: allow
    port: "{{ wordpress_http_port }}"
    proto: tcp
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Allow HTTPS through UFW (Debian/Ubuntu)
  community.general.ufw:
    rule: allow
    port: "{{ wordpress_https_port }}"
    proto: tcp
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Allow specific IPs through UFW (Debian/Ubuntu)
  community.general.ufw:
    rule: allow
    src: "{{ item }}"
  loop: "{{ wordpress_allowed_ips }}"
  when:
    - ansible_os_family == "Debian"
    - wordpress_allowed_ips | length > 0
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Configure UFW rate limiting for SSH (Debian/Ubuntu)
  community.general.ufw:
    rule: limit
    name: OpenSSH
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:firewall
    - wordpress:security

- name: Configure UFW rate limiting for HTTP/HTTPS (Debian/Ubuntu)
  community.general.ufw:
    rule: limit
    port: "{{ item }}"
    proto: tcp
  loop:
    - "{{ wordpress_http_port }}"
    - "{{ wordpress_https_port }}"
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:firewall
    - wordpress:security

# Advanced firewall rules for WordPress protection

- name: Block common WordPress attack patterns (RedHat/CentOS)
  ansible.posix.firewalld:
    rich_rule: >
      rule family='ipv4' 
      source address='0.0.0.0/0' 
      service name='http' 
      log prefix='WordPress Attack: ' 
      level='warning' 
      limit value='10/m' 
      drop
    zone: "{{ wordpress_firewall_zone | default('public') }}"
    permanent: true
    state: enabled
    immediate: true
  when: ansible_os_family == "RedHat"
  tags:
    - wordpress:firewall
    - wordpress:protection

- name: Create custom firewall chain for WordPress
  ansible.builtin.iptables:
    chain: WORDPRESS_PROTECTION
    action: create
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:firewall
    - wordpress:protection

- name: Block xmlrpc.php access via firewall
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "{{ wordpress_http_port }}"
    match: string
    string_match: "xmlrpc.php"
    string_algo: bm
    jump: DROP
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:firewall
    - wordpress:protection

- name: Block wp-config.php access via firewall
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "{{ wordpress_http_port }}"
    match: string
    string_match: "wp-config.php"
    string_algo: bm
    jump: DROP
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:firewall
    - wordpress:protection

- name: Configure connection tracking limits
  ansible.builtin.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: true
    state: present
    reload: true
  loop:
    - { key: 'net.netfilter.nf_conntrack_max', value: '65536' }
    - { key: 'net.netfilter.nf_conntrack_tcp_timeout_established', value: '600' }
    - { key: 'net.netfilter.nf_conntrack_tcp_timeout_close_wait', value: '10' }
    - { key: 'net.netfilter.nf_conntrack_tcp_timeout_time_wait', value: '10' }
  tags:
    - wordpress:firewall
    - wordpress:tuning

- name: Configure rate limiting parameters
  ansible.builtin.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: true
    state: present
    reload: true
  loop:
    - { key: 'net.ipv4.tcp_fin_timeout', value: '10' }
    - { key: 'net.ipv4.tcp_keepalive_time', value: '600' }
    - { key: 'net.ipv4.tcp_keepalive_intvl', value: '60' }
    - { key: 'net.ipv4.tcp_keepalive_probes', value: '3' }
  tags:
    - wordpress:firewall
    - wordpress:tuning

# Geographic blocking (optional)

- name: Install GeoIP modules for geographic blocking
  ansible.builtin.package:
    name:
      - "{{ 'geoip-database' if ansible_os_family == 'RedHat' else 'geoip-database' }}"
      - "{{ 'geoip-database-contrib' if ansible_os_family == 'RedHat' else 'geoip-database-extra' }}"
    state: present
  when: wordpress_enable_geoip_blocking | default(false) | bool
  tags:
    - wordpress:firewall
    - wordpress:geoip

- name: Configure geographic blocking rules
  ansible.builtin.template:
    src: geoip-blocking.rules.j2
    dest: /etc/firewall-geoip.rules
    owner: root
    group: root
    mode: '0644'
  when: wordpress_enable_geoip_blocking | default(false) | bool
  notify: reload firewalld
  tags:
    - wordpress:firewall
    - wordpress:geoip

# Firewall monitoring and logging

- name: Configure firewall logging
  ansible.builtin.lineinfile:
    path: /etc/rsyslog.conf
    line: "kern.warning /var/log/firewall.log"
    insertafter: "# Log kernel messages"
  notify: restart rsyslog
  tags:
    - wordpress:firewall
    - wordpress:logging

- name: Create firewall log rotation
  ansible.builtin.template:
    src: logrotate-firewall.j2
    dest: /etc/logrotate.d/firewall
    owner: root
    group: root
    mode: '0644'
  tags:
    - wordpress:firewall
    - wordpress:logging

- name: Create firewall monitoring script
  ansible.builtin.template:
    src: firewall-monitor.sh.j2
    dest: /usr/local/bin/firewall-monitor.sh
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:firewall
    - wordpress:monitoring

- name: Schedule firewall monitoring
  ansible.builtin.cron:
    name: "Firewall Monitoring"
    minute: "*/5"
    job: "/usr/local/bin/firewall-monitor.sh >> /var/log/firewall-monitor.log 2>&1"
    user: root
  tags:
    - wordpress:firewall
    - wordpress:monitoring

# Database firewall rules

- name: Block external database access
  ansible.posix.firewalld:
    rich_rule: "rule family='ipv4' port port='{{ wordpress_db_port }}' protocol='tcp' reject"
    zone: "{{ wordpress_firewall_zone | default('public') }}"
    permanent: true
    state: enabled
    immediate: true
  when:
    - ansible_os_family == "RedHat"
    - not wordpress_use_external_db | bool
  tags:
    - wordpress:firewall
    - wordpress:database

- name: Block external database access (UFW)
  community.general.ufw:
    rule: deny
    port: "{{ wordpress_db_port }}"
    proto: tcp
  when:
    - ansible_os_family == "Debian"
    - not wordpress_use_external_db | bool
  tags:
    - wordpress:firewall
    - wordpress:database

# Redis/Memcached firewall rules

- name: Block external Redis access
  ansible.posix.firewalld:
    rich_rule: "rule family='ipv4' port port='{{ wordpress_redis_port }}' protocol='tcp' reject"
    zone: "{{ wordpress_firewall_zone | default('public') }}"
    permanent: true
    state: enabled
    immediate: true
  when:
    - ansible_os_family == "RedHat"
    - wordpress_enable_redis | bool
    - not wordpress_use_external_cache | bool
  tags:
    - wordpress:firewall
    - wordpress:cache

- name: Block external Redis access (UFW)
  community.general.ufw:
    rule: deny
    port: "{{ wordpress_redis_port }}"
    proto: tcp
  when:
    - ansible_os_family == "Debian"
    - wordpress_enable_redis | bool
    - not wordpress_use_external_cache | bool
  tags:
    - wordpress:firewall
    - wordpress:cache

- name: Test firewall configuration
  ansible.builtin.command:
    cmd: "{{ 'firewall-cmd --list-all' if ansible_os_family == 'RedHat' else 'ufw status verbose' }}"
  register: firewall_status
  changed_when: false
  tags:
    - wordpress:firewall
    - wordpress:test

- name: Display firewall status
  ansible.builtin.debug:
    var: firewall_status.stdout_lines
  tags:
    - wordpress:firewall
    - wordpress:verify

- name: Verify essential ports are open
  ansible.builtin.wait_for:
    port: "{{ item }}"
    host: "{{ ansible_default_ipv4.address }}"
    timeout: 5
  loop:
    - "{{ wordpress_http_port }}"
    - "{{ wordpress_https_port }}"
  register: port_check
  failed_when: false
  tags:
    - wordpress:firewall
    - wordpress:verify

- name: Display port accessibility
  ansible.builtin.debug:
    msg: "Port {{ item.item }} is {{ 'accessible' if item.failed == false else 'blocked' }}"
  loop: "{{ port_check.results }}"
  tags:
    - wordpress:firewall
    - wordpress:verify