---
# WordPress plugin management

- name: Manage WordPress plugins using WP-CLI
  when: wordpress_install_wpcli | bool
  become: true
  become_user: "{{ wordpress_system_user }}"
  block:
    - name: Install/update WordPress plugins
      ansible.builtin.command:
        cmd: >
          wp plugin {{ 'install' if item.state == 'present' else 'delete' }}
          {{ item.name }}
          {% if item.version is defined and item.version != 'latest' %}--version={{ item.version }}{% endif %}
          {% if item.state == 'present' %}--activate{% endif %}
          --path={{ wordpress_install_dir }}
      args:
        creates: "{{ wordpress_install_dir }}/wp-content/plugins/{{ item.name }}"
      loop: "{{ wordpress_plugins }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.state == "present"
      register: plugin_install

    - name: Install custom plugins from URL
      when: wordpress_custom_plugins | length > 0
      block:
        - name: Download custom plugins
          ansible.builtin.get_url:
            url: "{{ item.source }}"
            dest: "/tmp/{{ item.name }}.zip"
            mode: "0644"
          loop: "{{ wordpress_custom_plugins }}"
          loop_control:
            label: "{{ item.name }}"
          when:
            - item.source is defined
            - item.state == "present"

        - name: Install custom plugins via WP-CLI
          ansible.builtin.command:
            cmd: >
              wp plugin install /tmp/{{ item.name }}.zip
              --activate
              --path={{ wordpress_install_dir }}
          args:
            creates: "{{ wordpress_install_dir }}/wp-content/plugins/{{ item.name }}"
          loop: "{{ wordpress_custom_plugins }}"
          loop_control:
            label: "{{ item.name }}"
          when:
            - item.source is defined
            - item.state == "present"

        - name: Clean up plugin archives
          ansible.builtin.file:
            path: "/tmp/{{ item.name }}.zip"
            state: absent
          loop: "{{ wordpress_custom_plugins }}"
          loop_control:
            label: "{{ item.name }}"

    - name: Update all plugins
      ansible.builtin.command:
        cmd: "wp plugin update --all --path={{ wordpress_install_dir }}"
      changed_when: false
      when: wordpress_version == "latest"

    - name: List installed plugins
      ansible.builtin.command:
        cmd: "wp plugin list --path={{ wordpress_install_dir }} --format=table"
      changed_when: false
      register: plugin_list

    - name: Display installed plugins
      ansible.builtin.debug:
        msg: "{{ plugin_list.stdout_lines }}"

- name: Configure plugin-specific settings
  block:
    - name: Configure Wordfence settings
      ansible.builtin.command:
        cmd: >
          wp option update wordfence_global_options '{{ wordfence_config | to_json }}'
          --path={{ wordpress_install_dir }}
      vars:
        wordfence_config:
          apiKey: ""
          isPaid: 0
          learningMode: 1
      become: true
      become_user: "{{ wordpress_system_user }}"
      when: "'wordfence' in wordpress_plugins | map(attribute='name') | list"
      changed_when: false

    - name: Configure WP Super Cache
      ansible.builtin.command:
        cmd: >
          wp super-cache enable
          --path={{ wordpress_install_dir }}
      become: true
      become_user: "{{ wordpress_system_user }}"
      when: "'wp-super-cache' in wordpress_plugins | map(attribute='name') | list"
      changed_when: false

