---
# Apache Web Server Configuration Tasks

- name: Install Apache web server (Debian/Ubuntu)
  ansible.builtin.package:
    name: "{{ wordpress_web_server_package.apache }}"
    state: present
    update_cache: "{{ wordpress_update_cache | bool }}"
  become: true
  when: ansible_os_family == "Debian"
  notify: Restart apache

- name: Install Apache web server (RedHat/CentOS)
  ansible.builtin.package:
    name: "{{ wordpress_web_server_package.apache }}"
    state: present
  become: true
  when: ansible_os_family == "RedHat"
  notify: Restart apache

- name: Enable Apache modules (Debian/Ubuntu)
  ansible.builtin.command:
    cmd: "a2enmod {{ item }}"
  loop: "{{ wordpress_apache_modules }}"
  become: true
  when: ansible_os_family == "Debian"
  register: apache_modules_result
  changed_when: "'already enabled' not in apache_modules_result.stdout"
  notify: Restart apache

- name: Create Apache virtual host configuration
  ansible.builtin.template:
    src: apache-vhost.conf.j2
    dest: "{{ wordpress_apache_sites_available }}/{{ wordpress_server_name }}.conf"
    owner: root
    group: root
    mode: '0644'
    backup: true
  become: true
  notify: Reload apache

- name: Enable Apache virtual host (Debian/Ubuntu)
  ansible.builtin.command:
    cmd: "a2ensite {{ wordpress_server_name }}.conf"
  become: true
  when: ansible_os_family == "Debian"
  register: enable_vhost_result
  changed_when: "'already enabled' not in enable_vhost_result.stdout"
  notify: Reload apache

- name: Disable default Apache site (Debian/Ubuntu)
  ansible.builtin.command:
    cmd: "a2dissite 000-default.conf"
  become: true
  when: ansible_os_family == "Debian"
  register: disable_default_result
  changed_when: "'already disabled' not in disable_default_result.stdout"
  notify: Reload apache

- name: Configure Apache main configuration
  ansible.builtin.template:
    src: "{{ 'apache2.conf.j2' if ansible_os_family == 'Debian' else 'httpd.conf.j2' }}"
    dest: "{{ wordpress_apache_conf_path }}/{{ 'apache2.conf' if ansible_os_family == 'Debian' else 'conf/httpd.conf' }}"
    owner: root
    group: root
    mode: '0644'
    backup: true
  become: true
  notify: Restart apache

- name: Configure Apache security settings
  ansible.builtin.template:
    src: apache-security.conf.j2
    dest: "{{ wordpress_apache_conf_path }}/{{ 'conf-available/security.conf' if ansible_os_family == 'Debian' else 'conf.d/security.conf' }}"
    owner: root
    group: root
    mode: '0644'
    backup: true
  become: true
  notify: Reload apache

- name: Enable security configuration (Debian/Ubuntu)
  ansible.builtin.command:
    cmd: "a2enconf security"
  become: true
  when: ansible_os_family == "Debian"
  register: enable_security_result
  changed_when: "'already enabled' not in enable_security_result.stdout"
  notify: Reload apache

- name: Configure Apache for PHP-FPM
  ansible.builtin.template:
    src: apache-php-fpm.conf.j2
    dest: "{{ wordpress_apache_conf_path }}/{{ 'conf-available/php-fpm.conf' if ansible_os_family == 'Debian' else 'conf.d/php-fpm.conf' }}"
    owner: root
    group: root
    mode: '0644'
    backup: true
  become: true
  notify: Reload apache

- name: Enable PHP-FPM configuration (Debian/Ubuntu)
  ansible.builtin.command:
    cmd: "a2enconf php-fpm"
  become: true
  when: ansible_os_family == "Debian"
  register: enable_php_fpm_result
  changed_when: "'already enabled' not in enable_php_fpm_result.stdout"
  notify: Reload apache

- name: Ensure Apache is started and enabled
  ansible.builtin.service:
    name: "{{ wordpress_web_server_service.apache }}"
    state: started
    enabled: true
  become: true

- name: Test Apache configuration
  ansible.builtin.command:
    cmd: "{{ 'apachectl' if ansible_os_family == 'RedHat' else 'apache2ctl' }} -t"
  become: true
  changed_when: false
  register: apache_config_test

- name: Display Apache configuration test result
  ansible.builtin.debug:
    var: apache_config_test.stdout
  when: apache_config_test.stdout is defined

- name: Create Apache log directory
  ansible.builtin.file:
    path: "{{ wordpress_log_dir }}/apache"
    state: directory
    owner: "{{ 'apache' if ansible_os_family == 'RedHat' else 'www-data' }}"
    group: "{{ 'apache' if ansible_os_family == 'RedHat' else 'www-data' }}"
    mode: '0755'
  become: true
  when: wordpress_enable_logging | bool

- name: Configure Apache logrotate
  ansible.builtin.template:
    src: apache-logrotate.j2
    dest: /etc/logrotate.d/apache-wordpress
    owner: root
    group: root
    mode: '0644'
  become: true
  when:
    - wordpress_enable_logging | bool
    - wordpress_logrotate_enabled | bool

- name: Set appropriate permissions on Apache configuration files
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: '0644'
  become: true
  loop:
    - "{{ wordpress_apache_sites_available }}/{{ wordpress_server_name }}.conf"
    - "{{ wordpress_apache_conf_path }}/{{ 'conf-available/security.conf' if ansible_os_family == 'Debian' else 'conf.d/security.conf' }}"
    - "{{ wordpress_apache_conf_path }}/{{ 'conf-available/php-fpm.conf' if ansible_os_family == 'Debian' else 'conf.d/php-fpm.conf' }}"

- name: Configure SELinux for Apache (RedHat/CentOS)
  ansible.posix.seboolean:
    name: "{{ item }}"
    state: true
    persistent: true
  become: true
  loop: "{{ wordpress_selinux_booleans }}"
  when:
    - ansible_os_family == "RedHat"
    - wordpress_selinux_enabled | default(false) | bool

- name: Set SELinux context for WordPress directory (RedHat/CentOS)
  ansible.posix.sefcontext:
    target: "{{ wordpress_install_dir }}(/.*)?"
    setype: httpd_exec_t
    state: present
  become: true
  when:
    - ansible_os_family == "RedHat"
    - wordpress_selinux_enabled | default(false) | bool

- name: Apply SELinux context to WordPress directory (RedHat/CentOS)
  ansible.builtin.command:
    cmd: "restorecon -Rv {{ wordpress_install_dir }}"
  become: true
  when:
    - ansible_os_family == "RedHat"
    - wordpress_selinux_enabled | default(false) | bool
  changed_when: false
