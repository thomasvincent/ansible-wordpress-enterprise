---
# Nginx-specific tasks

- name: Install Nginx
  ansible.builtin.package:
    name: "{{ wordpress_nginx_packages }}"
    state: present
  tags:
    - wordpress:webserver
    - wordpress:nginx

- name: Remove default Nginx configuration
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/nginx/sites-enabled/default
    - /etc/nginx/sites-available/default
    - /etc/nginx/conf.d/default.conf
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx

- name: Create Nginx configuration directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /etc/nginx/sites-available
    - /etc/nginx/sites-enabled
    - /etc/nginx/snippets
    - /etc/nginx/ssl
  tags:
    - wordpress:webserver
    - wordpress:nginx

- name: Configure main Nginx settings
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: '0644'
    backup: true
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx

- name: Create Nginx security headers snippet
  ansible.builtin.template:
    src: nginx-security-headers.conf.j2
    dest: /etc/nginx/snippets/security-headers.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:security

- name: Create Nginx SSL configuration snippet
  ansible.builtin.template:
    src: nginx-ssl.conf.j2
    dest: /etc/nginx/snippets/ssl.conf
    owner: root
    group: root
    mode: '0644'
  when: wordpress_enable_ssl | bool
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:ssl

- name: Create Nginx gzip configuration snippet
  ansible.builtin.template:
    src: nginx-gzip.conf.j2
    dest: /etc/nginx/snippets/gzip.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:performance

- name: Create Nginx caching configuration snippet
  ansible.builtin.template:
    src: nginx-cache.conf.j2
    dest: /etc/nginx/snippets/cache.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:performance

- name: Create Nginx rate limiting configuration
  ansible.builtin.template:
    src: nginx-rate-limit.conf.j2
    dest: /etc/nginx/snippets/rate-limit.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:security

- name: Create Nginx WordPress-specific configuration snippet
  ansible.builtin.template:
    src: nginx-wordpress.conf.j2
    dest: /etc/nginx/snippets/wordpress.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx

- name: Create Nginx FastCGI cache configuration
  ansible.builtin.template:
    src: nginx-fastcgi-cache.conf.j2
    dest: /etc/nginx/snippets/fastcgi-cache.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:performance

- name: Create FastCGI cache directory
  ansible.builtin.file:
    path: /var/cache/nginx/fastcgi
    state: directory
    owner: "{{ wordpress_nginx_user }}"
    group: "{{ wordpress_nginx_group }}"
    mode: '0755'
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:performance

- name: Create Nginx virtual host configuration
  ansible.builtin.template:
    src: nginx-vhost.conf.j2
    dest: "/etc/nginx/sites-available/{{ wordpress_server_name }}.conf"
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx

- name: Enable Nginx virtual host
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ wordpress_server_name }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ wordpress_server_name }}.conf"
    state: link
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx

- name: Create Nginx HTTP to HTTPS redirect configuration
  ansible.builtin.template:
    src: nginx-redirect.conf.j2
    dest: "/etc/nginx/sites-available/{{ wordpress_server_name }}-redirect.conf"
    owner: root
    group: root
    mode: '0644'
  when: wordpress_enable_ssl | bool
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:ssl

- name: Enable Nginx HTTP to HTTPS redirect
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ wordpress_server_name }}-redirect.conf"
    dest: "/etc/nginx/sites-enabled/{{ wordpress_server_name }}-redirect.conf"
    state: link
  when: wordpress_enable_ssl | bool
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:ssl

- name: Configure Nginx for WordPress multisite (if enabled)
  ansible.builtin.template:
    src: nginx-multisite.conf.j2
    dest: /etc/nginx/snippets/wordpress-multisite.conf
    owner: root
    group: root
    mode: '0644'
  when: wordpress_multisite_enabled | bool
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:multisite

- name: Configure Nginx for WordPress REST API
  ansible.builtin.template:
    src: nginx-wp-api.conf.j2
    dest: /etc/nginx/snippets/wordpress-api.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:api

- name: Configure Nginx for WordPress uploads security
  ansible.builtin.template:
    src: nginx-uploads-security.conf.j2
    dest: /etc/nginx/snippets/uploads-security.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:security

- name: Configure Nginx for WordPress admin protection
  ansible.builtin.template:
    src: nginx-admin-protection.conf.j2
    dest: /etc/nginx/snippets/admin-protection.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:security

- name: Configure Nginx logging
  ansible.builtin.template:
    src: nginx-logging.conf.j2
    dest: /etc/nginx/snippets/logging.conf
    owner: root
    group: root
    mode: '0644'
  when: wordpress_enable_logging | bool
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:logging

- name: Create Nginx log directories
  ansible.builtin.file:
    path: "{{ item | dirname }}"
    state: directory
    owner: "{{ wordpress_nginx_user }}"
    group: "{{ wordpress_nginx_group }}"
    mode: '0755'
  loop:
    - "{{ wordpress_access_log }}"
    - "{{ wordpress_error_log }}"
  when: wordpress_enable_logging | bool
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:logging

- name: Configure Nginx for CDN integration
  ansible.builtin.template:
    src: nginx-cdn.conf.j2
    dest: /etc/nginx/snippets/cdn.conf
    owner: root
    group: root
    mode: '0644'
  when: wordpress_enable_cdn | bool
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:cdn

- name: Configure Nginx for HTTP/2 server push
  ansible.builtin.template:
    src: nginx-http2-push.conf.j2
    dest: /etc/nginx/snippets/http2-push.conf
    owner: root
    group: root
    mode: '0644'
  when: wordpress_http2_push_enabled | bool
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:performance

- name: Configure Nginx for WebP image support
  ansible.builtin.template:
    src: nginx-webp.conf.j2
    dest: /etc/nginx/snippets/webp.conf
    owner: root
    group: root
    mode: '0644'
  when: wordpress_webp_enabled | bool
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:performance

- name: Configure Nginx maintenance mode
  ansible.builtin.template:
    src: nginx-maintenance.conf.j2
    dest: /etc/nginx/snippets/maintenance.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:maintenance

- name: Create maintenance page
  ansible.builtin.template:
    src: maintenance.html.j2
    dest: "{{ wordpress_install_dir }}/maintenance.html"
    owner: "{{ wordpress_system_user }}"
    group: "{{ wordpress_system_group }}"
    mode: '0644'
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:maintenance

- name: Configure Nginx status page
  ansible.builtin.template:
    src: nginx-status.conf.j2
    dest: /etc/nginx/snippets/status.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:monitoring

- name: Configure Nginx real IP handling (for load balancers/CDN)
  ansible.builtin.template:
    src: nginx-real-ip.conf.j2
    dest: /etc/nginx/snippets/real-ip.conf
    owner: root
    group: root
    mode: '0644'
  when: wordpress_ha_enabled | bool or wordpress_enable_cdn | bool
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:loadbalancer

- name: Configure Nginx for geographic restrictions
  ansible.builtin.template:
    src: nginx-geo-restrict.conf.j2
    dest: /etc/nginx/snippets/geo-restrict.conf
    owner: root
    group: root
    mode: '0644'
  when: wordpress_enable_geoip_blocking | default(false) | bool
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:security

- name: Install Nginx modules for enhanced functionality
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ 'nginx-module-geoip' if ansible_os_family == 'RedHat' else 'libnginx-mod-http-geoip' }}"
    - "{{ 'nginx-module-image-filter' if ansible_os_family == 'RedHat' else 'libnginx-mod-http-image-filter' }}"
  failed_when: false
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:modules

- name: Create Nginx monitoring script
  ansible.builtin.template:
    src: nginx-monitor.sh.j2
    dest: /usr/local/bin/nginx-monitor.sh
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:monitoring

- name: Schedule Nginx monitoring
  ansible.builtin.cron:
    name: "Nginx Monitor"
    minute: "*/5"
    job: "/usr/local/bin/nginx-monitor.sh >> /var/log/nginx-monitor.log 2>&1"
    user: root
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:monitoring

- name: Configure Nginx logrotate
  ansible.builtin.template:
    src: logrotate-nginx.j2
    dest: /etc/logrotate.d/nginx-wordpress
    owner: root
    group: root
    mode: '0644'
  when: wordpress_logrotate_enabled | bool
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:logging

- name: Test Nginx configuration
  ansible.builtin.command:
    cmd: nginx -t
  register: nginx_config_test
  changed_when: false
  failed_when: nginx_config_test.rc != 0
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:test

- name: Enable and start Nginx service
  ansible.builtin.systemd:
    name: nginx
    state: started
    enabled: true
  tags:
    - wordpress:webserver
    - wordpress:nginx

- name: Create Nginx tuning script
  ansible.builtin.template:
    src: nginx-tuning.sh.j2
    dest: /usr/local/bin/nginx-tuning.sh
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:performance

- name: Configure Nginx worker processes optimization
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^worker_processes'
    line: "worker_processes {{ ansible_processor_vcpus }};"
    backup: true
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:performance

- name: Configure Nginx worker connections optimization
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^(\s*)worker_connections'
    line: "    worker_connections {{ (ansible_memtotal_mb * 1024 * 1024 / 2048) | int }};"
    backup: true
  notify: reload nginx
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:performance

- name: Create Nginx backup script
  ansible.builtin.template:
    src: nginx-backup.sh.j2
    dest: /usr/local/bin/nginx-backup.sh
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:backup

- name: Schedule daily Nginx configuration backup
  ansible.builtin.cron:
    name: "Nginx Configuration Backup"
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/nginx-backup.sh >> /var/log/nginx-backup.log 2>&1"
    user: root
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:backup

- name: Display Nginx configuration summary
  ansible.builtin.debug:
    msg:
      - "Nginx configuration completed successfully"
      - "Virtual host: {{ wordpress_server_name }}"
      - "Document root: {{ wordpress_install_dir }}"
      - "PHP-FPM socket: {{ wordpress_php_fpm_listen }}"
      - "SSL enabled: {{ wordpress_enable_ssl | bool }}"
      - "HTTP/2 enabled: {{ wordpress_http2_push_enabled | bool }}"
      - "FastCGI cache: ENABLED"
      - "Gzip compression: ENABLED"
      - "Security headers: ENABLED"
      - "Rate limiting: ENABLED"
      - "Configuration test: {{ 'PASSED' if nginx_config_test.rc == 0 else 'FAILED' }}"
  tags:
    - wordpress:webserver
    - wordpress:nginx
    - wordpress:summary