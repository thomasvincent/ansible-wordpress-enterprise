---
# Final verification tasks

- name: Verify WordPress installation directory exists
  ansible.builtin.stat:
    path: "{{ wordpress_install_dir }}"
  register: wp_install_dir
  tags:
    - wordpress:verify
    - wordpress:installation

- name: Verify WordPress core files exist
  ansible.builtin.stat:
    path: "{{ wordpress_install_dir }}/{{ item }}"
  register: wp_core_files
  loop:
    - wp-config.php
    - wp-load.php
    - wp-settings.php
    - wp-blog-header.php
    - index.php
  tags:
    - wordpress:verify
    - wordpress:files

- name: Verify WordPress directory structure
  ansible.builtin.stat:
    path: "{{ wordpress_install_dir }}/{{ item }}"
  register: wp_directories
  loop:
    - wp-content
    - wp-content/themes
    - wp-content/plugins
    - wp-content/uploads
    - wp-admin
    - wp-includes
  tags:
    - wordpress:verify
    - wordpress:structure

- name: Test database connectivity
  ansible.builtin.command:
    cmd: >
      mysql -h {{ wordpress_db_host }} -P {{ wordpress_db_port }}
      -u {{ wordpress_db_user }} -p{{ wordpress_db_password }}
      -e "SELECT 1 FROM {{ wordpress_db_name }}.{{ wordpress_db_table_prefix }}posts LIMIT 1;"
  register: db_connection_test
  changed_when: false
  failed_when: false
  no_log: true
  tags:
    - wordpress:verify
    - wordpress:database

- name: Verify database tables exist
  ansible.builtin.command:
    cmd: >
      mysql -h {{ wordpress_db_host }} -P {{ wordpress_db_port }}
      -u {{ wordpress_db_user }} -p{{ wordpress_db_password }}
      -e "SHOW TABLES FROM {{ wordpress_db_name }};"
  register: db_tables
  changed_when: false
  failed_when: false
  no_log: true
  tags:
    - wordpress:verify
    - wordpress:database

- name: Test web server configuration
  ansible.builtin.command:
    cmd: "{{ 'nginx -t' if wordpress_web_server == 'nginx' else 'apachectl configtest' }}"
  register: webserver_config_test
  changed_when: false
  failed_when: false
  tags:
    - wordpress:verify
    - wordpress:webserver

- name: Check web server service status
  ansible.builtin.systemd:
    name: "{{ 'nginx' if wordpress_web_server == 'nginx' else 'apache2' if ansible_os_family == 'Debian' else 'httpd' }}"
  register: webserver_service
  tags:
    - wordpress:verify
    - wordpress:webserver

- name: Test PHP-FPM service status
  ansible.builtin.systemd:
    name: "{{ wordpress_php_fpm_service }}"
  register: php_fpm_service
  tags:
    - wordpress:verify
    - wordpress:php

- name: Test PHP functionality
  ansible.builtin.shell: |
    echo "<?php phpinfo(); ?>" > /tmp/test.php
    php /tmp/test.php | head -n 5
    rm -f /tmp/test.php
  register: php_test
  changed_when: false
  tags:
    - wordpress:verify
    - wordpress:php

- name: Test Redis connection (if enabled)
  ansible.builtin.command:
    cmd: "redis-cli{{ ' -h ' + wordpress_redis_host + ' -p ' + wordpress_redis_port|string if wordpress_use_external_cache else '' }} ping"
  register: redis_test
  changed_when: false
  failed_when: false
  when: wordpress_enable_redis | bool
  tags:
    - wordpress:verify
    - wordpress:redis

- name: Test Memcached connection (if enabled)
  ansible.builtin.command:
    cmd: "echo 'stats' | nc {{ wordpress_memcached_servers[0].split(':')[0] }} {{ wordpress_memcached_servers[0].split(':')[1] }}"
  register: memcached_test
  changed_when: false
  failed_when: false
  when: 
    - wordpress_enable_memcached | bool
    - wordpress_memcached_servers | length > 0
  tags:
    - wordpress:verify
    - wordpress:memcached

- name: Test SSL certificate (if SSL enabled)
  ansible.builtin.command:
    cmd: "openssl x509 -in {{ wordpress_ssl_certificate }} -text -noout"
  register: ssl_cert_test
  changed_when: false
  failed_when: false
  when: wordpress_enable_ssl | bool
  tags:
    - wordpress:verify
    - wordpress:ssl

- name: Verify firewall status
  ansible.builtin.command:
    cmd: "{{ 'firewall-cmd --state' if ansible_os_family == 'RedHat' else 'ufw status' }}"
  register: firewall_status
  changed_when: false
  failed_when: false
  when: wordpress_configure_firewall | bool
  tags:
    - wordpress:verify
    - wordpress:firewall

- name: Test fail2ban status (if enabled)
  ansible.builtin.command:
    cmd: fail2ban-client status
  register: fail2ban_status
  changed_when: false
  failed_when: false
  when: wordpress_enable_fail2ban | bool
  tags:
    - wordpress:verify
    - wordpress:fail2ban

- name: Test HTTP connectivity
  ansible.builtin.uri:
    url: "http://{{ wordpress_server_name }}:{{ wordpress_http_port }}"
    method: GET
    timeout: 10
    status_code: [200, 301, 302]
  register: http_test
  failed_when: false
  tags:
    - wordpress:verify
    - wordpress:connectivity

- name: Test HTTPS connectivity (if SSL enabled)
  ansible.builtin.uri:
    url: "https://{{ wordpress_server_name }}:{{ wordpress_https_port }}"
    method: GET
    timeout: 10
    status_code: [200, 301, 302]
    validate_certs: false
  register: https_test
  failed_when: false
  when: wordpress_enable_ssl | bool
  tags:
    - wordpress:verify
    - wordpress:connectivity

- name: Test WordPress wp-admin accessibility
  ansible.builtin.uri:
    url: "{{ wordpress_site_url }}/wp-admin/"
    method: GET
    timeout: 10
    status_code: [200, 302]
  register: wp_admin_test
  failed_when: false
  tags:
    - wordpress:verify
    - wordpress:admin

- name: Test WordPress REST API
  ansible.builtin.uri:
    url: "{{ wordpress_site_url }}/wp-json/wp/v2/"
    method: GET
    timeout: 10
    status_code: [200]
  register: wp_api_test
  failed_when: false
  tags:
    - wordpress:verify
    - wordpress:api

- name: Check WordPress file permissions
  ansible.builtin.stat:
    path: "{{ item.path }}"
  register: file_permissions
  loop:
    - { path: "{{ wordpress_install_dir }}/wp-config.php", expected_mode: "0640" }
    - { path: "{{ wordpress_install_dir }}/wp-content", expected_mode: "0755" }
    - { path: "{{ wordpress_install_dir }}/wp-content/uploads", expected_mode: "0755" }
  tags:
    - wordpress:verify
    - wordpress:permissions

- name: Verify backup directory exists
  ansible.builtin.stat:
    path: "{{ wordpress_backup_dir }}"
  register: backup_dir_check
  when: wordpress_enable_backups | bool
  tags:
    - wordpress:verify
    - wordpress:backups

- name: Test backup script execution
  ansible.builtin.command:
    cmd: "{{ wordpress_backup_dir }}/scripts/backup-database.sh"
  register: backup_test
  changed_when: false
  failed_when: false
  become: true
  become_user: "{{ wordpress_system_user }}"
  when: wordpress_enable_backups | bool
  tags:
    - wordpress:verify
    - wordpress:backups

- name: Check log files exist
  ansible.builtin.stat:
    path: "{{ item }}"
  register: log_files
  loop:
    - "{{ wordpress_error_log }}"
    - "{{ wordpress_access_log }}"
  when: wordpress_enable_logging | bool
  tags:
    - wordpress:verify
    - wordpress:logging

- name: Verify cron jobs are configured
  ansible.builtin.command:
    cmd: "crontab -u {{ wordpress_system_user }} -l"
  register: cron_jobs
  changed_when: false
  failed_when: false
  tags:
    - wordpress:verify
    - wordpress:cron

- name: Test WP-CLI functionality
  ansible.builtin.command:
    cmd: "wp --version"
  register: wpcli_test
  changed_when: false
  failed_when: false
  when: wordpress_install_wpcli | bool
  tags:
    - wordpress:verify
    - wordpress:wpcli

- name: Get WordPress version
  ansible.builtin.command:
    cmd: "wp core version --path={{ wordpress_install_dir }}"
  register: wp_version
  changed_when: false
  failed_when: false
  become: true
  become_user: "{{ wordpress_system_user }}"
  when: wordpress_install_wpcli | bool
  tags:
    - wordpress:verify
    - wordpress:version

- name: Check active plugins
  ansible.builtin.command:
    cmd: "wp plugin list --status=active --path={{ wordpress_install_dir }}"
  register: active_plugins
  changed_when: false
  failed_when: false
  become: true
  become_user: "{{ wordpress_system_user }}"
  when: wordpress_install_wpcli | bool
  tags:
    - wordpress:verify
    - wordpress:plugins

- name: Check active theme
  ansible.builtin.command:
    cmd: "wp theme list --status=active --path={{ wordpress_install_dir }}"
  register: active_theme
  changed_when: false
  failed_when: false
  become: true
  become_user: "{{ wordpress_system_user }}"
  when: wordpress_install_wpcli | bool
  tags:
    - wordpress:verify
    - wordpress:themes

- name: Verify system resource usage
  ansible.builtin.shell: |
    echo "Memory Usage: $(free -m | awk 'NR==2{printf "%.2f%%\t\t", $3*100/$2 }')"
    echo "Disk Usage: $(df -h {{ wordpress_install_dir }} | awk 'NR==2 {print $5}')"
    echo "CPU Load: $(uptime | awk -F'load average:' '{ print $2 }')"
  register: system_resources
  changed_when: false
  tags:
    - wordpress:verify
    - wordpress:resources

- name: Test WordPress database queries
  ansible.builtin.command:
    cmd: "wp db query 'SELECT COUNT(*) as post_count FROM {{ wordpress_db_table_prefix }}posts WHERE post_status=\"publish\"' --path={{ wordpress_install_dir }}"
  register: db_query_test
  changed_when: false
  failed_when: false
  become: true
  become_user: "{{ wordpress_system_user }}"
  when: wordpress_install_wpcli | bool
  tags:
    - wordpress:verify
    - wordpress:database

- name: Create verification report
  ansible.builtin.template:
    src: verification-report.html.j2
    dest: "{{ wordpress_log_dir }}/verification-report.html"
    owner: root
    group: root
    mode: '0644'
  tags:
    - wordpress:verify
    - wordpress:report

- name: Display comprehensive verification results
  ansible.builtin.debug:
    msg:
      - "=== WordPress Enterprise Deployment Verification ==="
      - ""
      - "Installation Status:"
      - "  WordPress directory: {{ 'EXISTS' if wp_install_dir.stat.exists else 'MISSING' }}"
      - "  Core files: {{ 'COMPLETE' if wp_core_files.results | selectattr('stat.exists', 'equalto', true) | list | length == wp_core_files.results | length else 'INCOMPLETE' }}"
      - "  Directory structure: {{ 'VALID' if wp_directories.results | selectattr('stat.exists', 'equalto', true) | list | length == wp_directories.results | length else 'INVALID' }}"
      - ""
      - "Service Status:"
      - "  Web server ({{ wordpress_web_server }}): {{ 'RUNNING' if webserver_service.status.ActiveState == 'active' else 'STOPPED' }}"
      - "  PHP-FPM: {{ 'RUNNING' if php_fpm_service.status.ActiveState == 'active' else 'STOPPED' }}"
      - "  Configuration test: {{ 'PASSED' if webserver_config_test.rc == 0 else 'FAILED' }}"
      - ""
      - "Database Status:"
      - "  Connection: {{ 'SUCCESS' if db_connection_test.rc == 0 else 'FAILED' }}"
      - "  Tables: {{ 'EXIST' if db_tables.rc == 0 and 'wp_posts' in db_tables.stdout else 'MISSING' }}"
      - ""
      - "Caching Status:"
      - "  Redis: {{ 'AVAILABLE' if redis_test is defined and redis_test.rc == 0 and redis_test.stdout == 'PONG' else 'UNAVAILABLE' if wordpress_enable_redis else 'DISABLED' }}"
      - "  Memcached: {{ 'AVAILABLE' if memcached_test is defined and memcached_test.rc == 0 else 'UNAVAILABLE' if wordpress_enable_memcached else 'DISABLED' }}"
      - ""
      - "Security Status:"
      - "  SSL/TLS: {{ 'CONFIGURED' if ssl_cert_test is defined and ssl_cert_test.rc == 0 else 'NOT CONFIGURED' if wordpress_enable_ssl else 'DISABLED' }}"
      - "  Firewall: {{ 'ACTIVE' if firewall_status is defined and firewall_status.rc == 0 else 'INACTIVE' if wordpress_configure_firewall else 'DISABLED' }}"
      - "  Fail2ban: {{ 'RUNNING' if fail2ban_status is defined and 'Status for the jail:' in fail2ban_status.stdout else 'INACTIVE' if wordpress_enable_fail2ban else 'DISABLED' }}"
      - ""
      - "Connectivity Status:"
      - "  HTTP ({{ wordpress_http_port }}): {{ 'ACCESSIBLE' if http_test.status in [200, 301, 302] else 'INACCESSIBLE' }}"
      - "  HTTPS ({{ wordpress_https_port }}): {{ 'ACCESSIBLE' if https_test is defined and https_test.status in [200, 301, 302] else 'INACCESSIBLE' if wordpress_enable_ssl else 'DISABLED' }}"
      - "  WordPress Admin: {{ 'ACCESSIBLE' if wp_admin_test.status in [200, 302] else 'INACCESSIBLE' }}"
      - "  REST API: {{ 'ACCESSIBLE' if wp_api_test.status == 200 else 'INACCESSIBLE' }}"
      - ""
      - "WordPress Information:"
      - "  Version: {{ wp_version.stdout if wp_version is defined and wp_version.rc == 0 else 'UNKNOWN' }}"
      - "  Active plugins: {{ active_plugins.stdout_lines | length - 1 if active_plugins is defined and active_plugins.rc == 0 else 'UNKNOWN' }}"
      - "  Active theme: {{ active_theme.stdout_lines[1].split()[0] if active_theme is defined and active_theme.rc == 0 and active_theme.stdout_lines | length > 1 else 'UNKNOWN' }}"
      - ""
      - "Backup Status:"
      - "  Backup directory: {{ 'EXISTS' if backup_dir_check is defined and backup_dir_check.stat.exists else 'MISSING' if wordpress_enable_backups else 'DISABLED' }}"
      - "  Backup script test: {{ 'PASSED' if backup_test is defined and backup_test.rc == 0 else 'FAILED' if wordpress_enable_backups else 'DISABLED' }}"
      - ""
      - "System Resources:"
      - "{{ system_resources.stdout_lines | join('\n  ') | indent(2, first=false) }}"
      - ""
      - "WP-CLI: {{ 'AVAILABLE' if wpcli_test is defined and wpcli_test.rc == 0 else 'UNAVAILABLE' if wordpress_install_wpcli else 'DISABLED' }}"
      - ""
      - "Verification completed at: {{ ansible_date_time.iso8601 }}"
      - "Report saved to: {{ wordpress_log_dir }}/verification-report.html"
  tags:
    - wordpress:verify
    - wordpress:summary

- name: Fail deployment if critical issues found
  ansible.builtin.fail:
    msg: "WordPress deployment verification failed. Critical issues detected."
  when: >
    not wp_install_dir.stat.exists or
    (wp_core_files.results | selectattr('stat.exists', 'equalto', true) | list | length != wp_core_files.results | length) or
    (webserver_service.status.ActiveState != 'active') or
    (php_fpm_service.status.ActiveState != 'active') or
    (db_connection_test.rc != 0) or
    (webserver_config_test.rc != 0)
  tags:
    - wordpress:verify
    - wordpress:validation

- name: Display deployment success message
  ansible.builtin.debug:
    msg:
      - "✅ WordPress Enterprise deployment completed successfully!"
      - "🌐 Site URL: {{ wordpress_site_url }}"
      - "🔧 Admin URL: {{ wordpress_site_url }}/wp-admin/"
      - "👤 Admin User: {{ wordpress_admin_user }}"
      - "📧 Admin Email: {{ wordpress_admin_email }}"
      - "📋 Full verification report: {{ wordpress_log_dir }}/verification-report.html"
  tags:
    - wordpress:verify
    - wordpress:success