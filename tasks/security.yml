---
# Security hardening tasks

- name: Install security packages
  ansible.builtin.package:
    name:
      - aide                 # Advanced Intrusion Detection Environment
      - rkhunter            # Rootkit Hunter
      - chkrootkit          # Check Rootkit
      - lynis               # Security auditing tool
      - clamav              # Antivirus engine
      - clamav-daemon       # ClamAV daemon
      - unattended-upgrades # Automatic security updates (Debian/Ubuntu)
    state: present
  failed_when: false  # Some packages may not be available on all distributions
  tags:
    - wordpress:security
    - wordpress:packages

- name: Configure automatic security updates (Debian/Ubuntu)
  ansible.builtin.template:
    src: 50unattended-upgrades.j2
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    owner: root
    group: root
    mode: '0644'
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:security
    - wordpress:updates

- name: Enable automatic security updates (Debian/Ubuntu)
  ansible.builtin.template:
    src: 20auto-upgrades.j2
    dest: /etc/apt/apt.conf.d/20auto-upgrades
    owner: root
    group: root
    mode: '0644'
  when: ansible_os_family == "Debian"
  tags:
    - wordpress:security
    - wordpress:updates

- name: Configure system security limits
  ansible.builtin.template:
    src: security-limits.conf.j2
    dest: /etc/security/limits.d/99-wordpress-security.conf
    owner: root
    group: root
    mode: '0644'
  tags:
    - wordpress:security
    - wordpress:limits

- name: Configure kernel security parameters
  ansible.builtin.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: true
    state: present
    reload: true
  loop:
    # Network security
    - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }
    - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }
    - { key: 'net.ipv4.conf.all.accept_redirects', value: '0' }
    - { key: 'net.ipv4.conf.default.accept_redirects', value: '0' }
    - { key: 'net.ipv4.conf.all.secure_redirects', value: '0' }
    - { key: 'net.ipv4.conf.default.secure_redirects', value: '0' }
    - { key: 'net.ipv4.conf.all.accept_source_route', value: '0' }
    - { key: 'net.ipv4.conf.default.accept_source_route', value: '0' }
    - { key: 'net.ipv4.conf.all.log_martians', value: '1' }
    - { key: 'net.ipv4.conf.default.log_martians', value: '1' }
    - { key: 'net.ipv4.icmp_echo_ignore_broadcasts', value: '1' }
    - { key: 'net.ipv4.icmp_ignore_bogus_error_responses', value: '1' }
    - { key: 'net.ipv4.ip_forward', value: '0' }
    # TCP security
    - { key: 'net.ipv4.tcp_syncookies', value: '1' }
    - { key: 'net.ipv4.tcp_timestamps', value: '0' }
    - { key: 'net.ipv4.tcp_rfc1337', value: '1' }
    # Memory protection
    - { key: 'kernel.dmesg_restrict', value: '1' }
    - { key: 'kernel.kptr_restrict', value: '2' }
    - { key: 'kernel.yama.ptrace_scope', value: '1' }
    - { key: 'kernel.kexec_load_disabled', value: '1' }
  tags:
    - wordpress:security
    - wordpress:kernel

- name: Disable unused network protocols
  ansible.builtin.lineinfile:
    path: /etc/modprobe.d/blacklist-wordpress.conf
    line: "{{ item }}"
    create: true
    owner: root
    group: root
    mode: '0644'
  loop:
    - "install dccp /bin/true"
    - "install sctp /bin/true"
    - "install rds /bin/true"
    - "install tipc /bin/true"
    - "install bluetooth /bin/true"
    - "install usb-storage /bin/true"
  tags:
    - wordpress:security
    - wordpress:modules

- name: Secure shared memory
  ansible.builtin.lineinfile:
    path: /etc/fstab
    line: "tmpfs /run/shm tmpfs defaults,noexec,nosuid 0 0"
    regexp: "^tmpfs\\s+/run/shm"
  tags:
    - wordpress:security
    - wordpress:filesystem

- name: Configure SSH security hardening
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?\\s*{{ item.key }}"
    line: "{{ item.key }} {{ item.value }}"
    backup: true
  loop:
    - { key: 'Protocol', value: '2' }
    - { key: 'PermitRootLogin', value: 'no' }
    - { key: 'PasswordAuthentication', value: 'no' }
    - { key: 'PermitEmptyPasswords', value: 'no' }
    - { key: 'X11Forwarding', value: 'no' }
    - { key: 'MaxAuthTries', value: '3' }
    - { key: 'ClientAliveInterval', value: '300' }
    - { key: 'ClientAliveCountMax', value: '2' }
    - { key: 'LoginGraceTime', value: '60' }
    - { key: 'MaxStartups', value: '2' }
    - { key: 'Banner', value: '/etc/ssh/banner' }
  notify: restart sshd
  tags:
    - wordpress:security
    - wordpress:ssh

- name: Create SSH banner
  ansible.builtin.template:
    src: ssh-banner.j2
    dest: /etc/ssh/banner
    owner: root
    group: root
    mode: '0644'
  tags:
    - wordpress:security
    - wordpress:ssh

- name: Configure WordPress file permissions security
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: "{{ item.mode }}"
    owner: "{{ wordpress_system_user }}"
    group: "{{ wordpress_system_group }}"
  loop:
    - { path: "{{ wordpress_install_dir }}/wp-config.php", mode: '0640' }
    - { path: "{{ wordpress_install_dir }}/.htaccess", mode: '0644' }
    - { path: "{{ wordpress_install_dir }}/wp-content", mode: '0755' }
    - { path: "{{ wordpress_install_dir }}/wp-includes", mode: '0755' }
    - { path: "{{ wordpress_install_dir }}/wp-admin", mode: '0755' }
  tags:
    - wordpress:security
    - wordpress:permissions

- name: Secure WordPress configuration files
  ansible.builtin.file:
    path: "{{ item }}"
    mode: '0600'
    owner: "{{ wordpress_system_user }}"
    group: "{{ wordpress_system_group }}"
  loop:
    - "{{ wordpress_install_dir }}/wp-config.php"
  tags:
    - wordpress:security
    - wordpress:config

- name: Remove dangerous WordPress files
  ansible.builtin.file:
    path: "{{ wordpress_install_dir }}/{{ item }}"
    state: absent
  loop:
    - readme.html
    - license.txt
    - wp-config-sample.php
    - wp-admin/install.php
  tags:
    - wordpress:security
    - wordpress:cleanup

- name: Configure WordPress security constants
  ansible.builtin.lineinfile:
    path: "{{ wordpress_install_dir }}/wp-config.php"
    regexp: "define\\s*\\(\\s*['\"]{{ item.key }}['\"]"
    line: "define('{{ item.key }}', {{ item.value }});"
    insertbefore: "/* That's all, stop editing!"
  loop:
    - { key: 'DISALLOW_FILE_EDIT', value: "{{ wordpress_disable_file_edit | lower }}" }
    - { key: 'DISALLOW_FILE_MODS', value: "{{ wordpress_disable_file_mods | lower }}" }
    - { key: 'FORCE_SSL_ADMIN', value: "{{ wordpress_force_ssl_admin | lower }}" }
    - { key: 'DISALLOW_UNFILTERED_HTML', value: "{{ wordpress_disallow_unfiltered_html | lower }}" }
    - { key: 'WP_DEBUG_DISPLAY', value: "{{ wordpress_debug_display | lower }}" }
    - { key: 'SCRIPT_DEBUG', value: 'false' }
    - { key: 'CONCATENATE_SCRIPTS', value: 'true' }
    - { key: 'COMPRESS_SCRIPTS', value: 'true' }
    - { key: 'COMPRESS_CSS', value: 'true' }
    - { key: 'ENFORCE_GZIP', value: 'true' }
  notify: run wp-cli cache flush
  tags:
    - wordpress:security
    - wordpress:config

- name: Configure additional security constants
  ansible.builtin.lineinfile:
    path: "{{ wordpress_install_dir }}/wp-config.php"
    regexp: "define\\s*\\(\\s*['\"]{{ item.key }}['\"]"
    line: "define('{{ item.key }}', '{{ item.value }}');"
    insertbefore: "/* That's all, stop editing!"
  loop:
    - { key: 'WP_POST_REVISIONS', value: '3' }
    - { key: 'EMPTY_TRASH_DAYS', value: '7' }
    - { key: 'WP_AUTO_UPDATE_CORE', value: 'true' }
    - { key: 'AUTOMATIC_UPDATER_DISABLED', value: 'false' }
    - { key: 'WP_CRON_LOCK_TIMEOUT', value: '60' }
  notify: run wp-cli cache flush
  tags:
    - wordpress:security
    - wordpress:config

- name: Create WordPress security htaccess rules
  ansible.builtin.blockinfile:
    path: "{{ wordpress_install_dir }}/.htaccess"
    block: |
      # WordPress Security Headers
      <IfModule mod_headers.c>
        Header always set X-Content-Type-Options nosniff
        Header always set X-Frame-Options DENY
        Header always set X-XSS-Protection "1; mode=block"
        Header always set Referrer-Policy "strict-origin-when-cross-origin"
        Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';"
        Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        Header always set Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=()"
      </IfModule>

      # Block access to sensitive files
      <FilesMatch "(^#.*#|\.(bak|config|dist|fla|inc|ini|log|psd|sh|sql|sw[op])|~)$">
        Order allow,deny
        Deny from all
        Satisfy All
      </FilesMatch>

      # Block access to wp-config.php
      <Files wp-config.php>
        Order allow,deny
        Deny from all
      </Files>

      # Block access to xmlrpc.php
      <Files xmlrpc.php>
        Order allow,deny
        Deny from all
      </Files>

      # Block access to wp-admin for non-admin users
      <IfModule mod_rewrite.c>
        RewriteEngine On
        RewriteCond %{REQUEST_URI} ^/wp-admin
        RewriteCond %{REQUEST_URI} !^/wp-admin/admin-ajax.php
        RewriteCond %{REQUEST_URI} !^/wp-admin/admin-post.php
        RewriteCond %{HTTP_COOKIE} !wordpress_logged_in
        RewriteRule . /wp-login.php?redirect_to=%{REQUEST_URI} [R=302,L]
      </IfModule>

      # Block suspicious request methods
      <LimitExcept GET POST HEAD>
        Order allow,deny
        Deny from all
      </LimitExcept>

      # Block PHP execution in uploads
      <Directory "{{ wordpress_install_dir }}/wp-content/uploads/">
        <FilesMatch "\.php$">
          Order allow,deny
          Deny from all
        </FilesMatch>
      </Directory>
    marker: "# {mark} WORDPRESS SECURITY RULES"
    create: true
  when: wordpress_web_server == 'apache'
  tags:
    - wordpress:security
    - wordpress:htaccess

- name: Configure logrotate for security logs
  ansible.builtin.template:
    src: logrotate-security.j2
    dest: /etc/logrotate.d/wordpress-security
    owner: root
    group: root
    mode: '0644'
  tags:
    - wordpress:security
    - wordpress:logging

- name: Initialize AIDE database
  ansible.builtin.command:
    cmd: aide --init
    creates: /var/lib/aide/aide.db.new
  tags:
    - wordpress:security
    - wordpress:aide

- name: Move AIDE database to production location
  ansible.builtin.command:
    cmd: mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db
    creates: /var/lib/aide/aide.db
  tags:
    - wordpress:security
    - wordpress:aide

- name: Schedule daily AIDE check
  ansible.builtin.cron:
    name: "AIDE integrity check"
    minute: "0"
    hour: "2"
    job: "/usr/bin/aide --check > /var/log/aide-check.log 2>&1"
    user: root
  tags:
    - wordpress:security
    - wordpress:aide

- name: Configure rkhunter
  ansible.builtin.template:
    src: rkhunter.conf.j2
    dest: /etc/rkhunter.conf
    owner: root
    group: root
    mode: '0644'
    backup: true
  tags:
    - wordpress:security
    - wordpress:rkhunter

- name: Update rkhunter database
  ansible.builtin.command:
    cmd: rkhunter --update
  changed_when: false
  tags:
    - wordpress:security
    - wordpress:rkhunter

- name: Schedule weekly rkhunter scan
  ansible.builtin.cron:
    name: "RKHunter scan"
    minute: "0"
    hour: "3"
    weekday: "0"
    job: "/usr/bin/rkhunter --check --skip-keypress --report-warnings-only > /var/log/rkhunter-scan.log 2>&1"
    user: root
  tags:
    - wordpress:security
    - wordpress:rkhunter

- name: Configure ClamAV
  ansible.builtin.template:
    src: clamd.conf.j2
    dest: /etc/clamav/clamd.conf
    owner: root
    group: root
    mode: '0644'
    backup: true
  notify: restart clamav-daemon
  tags:
    - wordpress:security
    - wordpress:clamav

- name: Update ClamAV database
  ansible.builtin.command:
    cmd: freshclam
  changed_when: false
  failed_when: false
  tags:
    - wordpress:security
    - wordpress:clamav

- name: Schedule daily ClamAV scan
  ansible.builtin.cron:
    name: "ClamAV scan"
    minute: "0"
    hour: "1"
    job: "/usr/bin/clamscan -r {{ wordpress_install_dir }} --log=/var/log/clamav-scan.log --infected --remove"
    user: root
  tags:
    - wordpress:security
    - wordpress:clamav

- name: Create security monitoring script
  ansible.builtin.template:
    src: security-monitor.sh.j2
    dest: /usr/local/bin/security-monitor.sh
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:security
    - wordpress:monitoring

- name: Schedule security monitoring
  ansible.builtin.cron:
    name: "Security Monitor"
    minute: "*/15"
    job: "/usr/local/bin/security-monitor.sh >> /var/log/security-monitor.log 2>&1"
    user: root
  tags:
    - wordpress:security
    - wordpress:monitoring

- name: Create security incident response script
  ansible.builtin.template:
    src: incident-response.sh.j2
    dest: /usr/local/bin/incident-response.sh
    owner: root
    group: root
    mode: '0755'
  tags:
    - wordpress:security
    - wordpress:incident-response

- name: Configure auditd for security logging
  ansible.builtin.template:
    src: audit.rules.j2
    dest: /etc/audit/rules.d/wordpress-security.rules
    owner: root
    group: root
    mode: '0640'
  notify: restart auditd
  tags:
    - wordpress:security
    - wordpress:audit

- name: Disable unused services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: stopped
    enabled: false
  loop:
    - cups
    - bluetooth
    - avahi-daemon
    - nfs-server
    - rpcbind
  failed_when: false
  tags:
    - wordpress:security
    - wordpress:services

- name: Remove unnecessary packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: absent
  loop:
    - telnet
    - rsh-server
    - rsh
    - ypbind
    - ypserv
    - tftp
    - tftp-server
    - talk
    - talk-server
    - xinetd
  failed_when: false
  tags:
    - wordpress:security
    - wordpress:packages

- name: Create backup of original configurations
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ item }}.backup-{{ ansible_date_time.epoch }}"
    remote_src: true
    backup: true
  loop:
    - /etc/ssh/sshd_config
    - /etc/fstab
    - /etc/sysctl.conf
  failed_when: false
  tags:
    - wordpress:security
    - wordpress:backup

- name: Run Lynis security audit
  ansible.builtin.command:
    cmd: lynis audit system --quick
  register: lynis_audit
  changed_when: false
  failed_when: false
  tags:
    - wordpress:security
    - wordpress:audit

- name: Display security hardening summary
  ansible.builtin.debug:
    msg:
      - "Security hardening completed successfully"
      - "AIDE integrity checking: ENABLED"
      - "RKHunter rootkit scanning: ENABLED"
      - "ClamAV antivirus scanning: ENABLED"
      - "SSH hardening: APPLIED"
      - "Kernel security parameters: CONFIGURED"
      - "WordPress file permissions: SECURED"
      - "Security monitoring: ACTIVE"
      - "Automatic security updates: {{ 'ENABLED' if ansible_os_family == 'Debian' else 'MANUAL' }}"
  tags:
    - wordpress:security
    - wordpress:summary